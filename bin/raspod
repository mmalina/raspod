#!/bin/bash

#Main config file location
CONF_FILE=~/.raspod/raspod.conf

function usage {
	echo Usage: $0 
	echo "          -profile profile Uses profile.pod as a profile"
	echo "          -generate-cron-items"
	echo "          -help Displays this message"
        exit 1
}

#Fail if the config file is not found
if [ ! -f $CONF_FILE ]
then
	echo $CONF_FILE not found, halting.
	usage
fi

#Load the main config file
. $CONF_FILE

while [ $# -gt 0 ] 
do
	case $1 in
		-help) 
			usage
			;;
		-profile) 
			shift
			PROFILE=$1
			;;
		-generate-cron-items)
			cd ~/.raspod
			echo "#Items for raspod profiles in ~/.raspod/"
			for POD in *.pod
			do
				eval "`grep CRON_ITEM $POD`"
				echo "$CRON_ITEM" '~/bin/raspod' -profile ${POD%.pod}
			done
			exit
			;;
		*) 
			echo unknown option $1
			usage
	esac
	shift
done

#Check if we have a profile before we begin
if [ -f $PROFILE.pod ]
	then PREFIX=$PROFILE; . $PROFILE.pod
else if [ -f ~/.raspod/$PROFILE.pod ]
	then PREFIX=$PROFILE; . ~/.raspod/$PROFILE.pod
else 
	echo Profile not found: ~/.raspod/$PROFILE.pod ; usage
fi
fi

FILENAME=$PREFIX-`date +%Y-%m-%d-%H-%M`.mp3
FILE=$DEST_DIR/$PREFIX/$FILENAME

if [ ! -d $DEST_DIR/$PREFIX ]
	then mkdir $DEST_DIR/$PREFIX
fi

if [ $PLAYLIST"x" != "x" ]
	then URL="-playlist $PLAYLIST"
fi

if [ "${URL}x" = "x" ]
	then echo Missing URL.
		usage
fi

if ! expr $DURATION + 1 >/dev/null 2>&1
	then echo Illegal duration: $DURATION
		usage
fi

if ! touch $FILE 2> /dev/null
	then echo Illegal file name: $FILE
		usage
fi

#Have mplayer download the stream and kill it after a timeout
mplayer -dumpstream -dumpfile $FILE $URL < /dev/null &
#Sleep interval in seconds - some systems don't support minutes
sleep $((DURATION*60))
kill $!

#Tag the resulting file
id3v2 -y `date +%Y` $FILE
if [ -n "$AUTHOR" ]
then id3v2 -a "$AUTHOR" $FILE
fi
if [ -n "$ALBUM" ]
then id3v2 -A "$ALBUM" $FILE
fi
if [ -n "$TITLE" ]
then id3v2 -t "$TITLE" $FILE
fi
if [ -n "$GENRE" ]
then id3v2 -g "$GENRE" $FILE
fi
if [ -n "$DESC" ]
then id3v2 -c "$DESC" $FILE
fi

#Some systems don't support date -R, take care of that
if date -R >/dev/null 2>&1
then
	DATE=`date -R`
else
	LANG_ORIG="$LANG"
	LANG=en_US
	DATE=`date "+%a, %d %b %Y %T %z"`
	LANG="$LANG_ORIG"
fi
XML_FILE=$DEST_DIR/$PREFIX.xml
FILE_URL=$BASE_URL/$PREFIX/$FILENAME
#Some systems don't support the standard stat options
if stat -c%s $FILE >/dev/null 2>&1
then
	FILESIZE=`stat -c%s $FILE`
else
	FILESIZE=`stat -f %z $FILE`
fi

#Creating the xml file for the first time
if [ ! -f $XML_FILE ]
then
	cat > $XML_FILE <<_EOF
<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">

<channel>
<title>title</title>
<link>link</link>
<description>desc</description>
  <generator>raspod by anyberry.net</generator>
    </channel>
</rss>
_EOF
fi


# Add a new entry in the rss file,
# keep the file to a max of $RSS_ITEMS entries,
# and change the file's date to right now.
/usr/bin/perl -e "use XML::RSS; use Encode; \
	my \$rss = new XML::RSS; \
	\$rss->parsefile('$XML_FILE'); \
	while (@{\$rss->{'items'}} >= $RSS_ITEMS) { \
		pop(@{\$rss->{'items'}}); \
	} \
	\$rss->add_item(title => decode('utf8','$TITLE'), \
		link => decode('utf8','$FILE_URL'), \
		description => decode('utf8','$DESC'), \
		pubDate => '$DATE', \
		enclosure => { \
			url => decode('utf8','$FILE_URL'), \
			type => 'audio/mpeg', \
			length => '$FILESIZE' \
		} \
	); \
	\$rss->channel(title => decode('utf8','$RSS_TITLE'), \
		link => decode('utf8','$RSS_LINK'), \
		description => decode('utf8','$RSS_DESCRIPTION'), \
		pubDate => '$DATE', \
		lastBuildDate => '$DATE' \
	); \
	\$rss->save('$XML_FILE'); "

