#!/bin/bash

function usage {
	echo Usage: $0 -url URL -duration minutes -prefix prefix '[-destdir dir]'
	echo "          -profile profile Uses profile.pod as a profile"
	echo "          -help Displays this message"
        exit 1
}

DEST_DIR=~rasp/anyberry/www/raspod
BASE_URL=http://anyberry.net/raspod
PREFIX=misc
DURATION=30

while [ $# -gt 0 ] 
do
	case $1 in
		-help) 
			usage
			;;
		-profile) 
			shift
			echo Profile: $1
			if [ -f $1.pod ]
				then PREFIX=$1; . $1.pod
			else if [ -f ~/.raspod/$1.pod ]
				then PREFIX=$1; . ~/.raspod/$1.pod
			else echo Profile not found: ~/.raspod/$1.pod ; usage
			fi
			fi
			;;
		-url) 
			shift
			echo URL: $1
			URL=$1
			;;
		-playlist) 
			shift
			echo Playlis: $1
			PLAYLIST=$1
			;;
		-duration) 
			shift
			echo Duration: $1
			DURATION=$1
			;;
		-prefix) 
			shift
			echo Prefix: $1
			PREFIX=$1
			;;
		-destdir) 
			shift
			echo Destdir: $1
			DEST_DIR=$1
			;;
		*) 
			echo unknown option $1
			usage
	esac
	shift
done

FILENAME=$PREFIX-`date +%Y-%m-%d-%H-%M`.mp3
FILE=$DEST_DIR/$PREFIX/$FILENAME

if [ ! -d $DEST_DIR/$PREFIX ]
	then mkdir $DEST_DIR/$PREFIX
fi

if [ $PLAYLIST"x" != "x" ]
	then URL="-playlist $PLAYLIST"
fi

if [ "${URL}x" = "x" ]
	then echo Missing URL.
		usage
fi

if ! expr $DURATION + 1 >/dev/null 2>&1
	then echo Illegal duration: $DURATION
		usage
fi

if ! touch $FILE 2> /dev/null
	then echo Illegal file name: $FILE
		usage
fi

#Have mplayer download the stream and kill it after a timeout
mplayer -dumpstream -dumpfile $FILE $URL < /dev/null &
sleep ${DURATION}m
kill $!

#Tag the resulting file
id3v2 -y `date +%Y` $FILE
if [ -n "$AUTHOR" ]
then id3v2 -a "$AUTHOR" $FILE
fi

if [ -n "$ALBUM" ]
then id3v2 -A "$ALBUM" $FILE
fi

if [ -n "$TITLE" ]
then id3v2 -t "$TITLE" $FILE
fi

if [ -n "$GENRE" ]
then id3v2 -g "$GENRE" $FILE
fi

if [ -n "$DESC" ]
then id3v2 -c "$DESC" $FILE
fi

XML_FILE=$DEST_DIR/$PREFIX.xml
DATE=`date -R`
FILE_URL=$BASE_URL/$PREFIX/$FILENAME
FILESIZE=`stat -c%s $FILE`

#Creating the xml file for the first time
if [ ! -f $XML_FILE ]
then
	cat > $XML_FILE <<_EOF
<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0">

<channel>
<title>$RSS_TITLE</title>
<link>$RSS_LINK</link>
<description>$RSS_DESC</description>
  <generator>raspod by anyberry.net</generator>
    </channel>
</rss>
_EOF
fi


# Add a new entry in the rss file,
# keep the file to a max of $RSS_ITEMS entries,
# and change the file's date to right now.
/usr/bin/perl -e "use XML::RSS; \
	my \$rss = new XML::RSS; \
	\$rss->parsefile('$XML_FILE'); \
	while (@{\$rss->{'items'}} >= $RSS_ITEMS) { \
		pop(@{\$rss->{'items'}}); \
	} \
	\$rss->add_item(title => '$TITLE', \
		link => '$FILE_URL', \
		description => '$DESC', \
		pubDate => '$DATE', \
		enclosure => { \
			url => '$FILE_URL', \
			type => 'audio/mpeg', \
			length => '$FILESIZE' \
		} \
	); \
	\$rss->save('$XML_FILE'); "

